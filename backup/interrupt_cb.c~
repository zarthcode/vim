/*
 * interrupt_cb.c
 *
 * Created: 2/23/2013 8:32:20 AM
 *  Author: Anthony
 */ 
#include "interrupt_cb.h"
#include <avr/interrupt.h>
#include <stdio.h>


/** Interrupt callback structure
* @todo Compact this structure a bit to recover some additional SRAM, or stow it in program memory.
*/
typedef struct {
	void (*p1_cbfunction)(void);
	void (*p2_cbfunction)(void);
	void (*p3_cbfunction)(void);
	void (*p4_cbfunction)(void);
	
	uint8_t p1_pin;
	PORT_t* p1_port;

	uint8_t p2_pin;
	PORT_t* p2_port;

	uint8_t p3_pin;
	PORT_t* p3_port;
	
	uint8_t p4_pin;
	PORT_t* p4_port;
	
	bool p1_active_low;
	bool p2_active_low;
	bool p3_active_low;
	bool p4_active_low;
} dmp_int_s;

static dmp_int_s registered_interrupts = {0};

/**
 * @brief Registers a callback for the MPU-9150
 *
 * @param int_num [0-3] Interrupt number corresponding to a max of 4 IMU devices.
 * @param cb address to the callback function.
 * @param port Address of the port the interrupt pin is located on.
 * @param pin Pin number of the interrupt.
 * @param active_low Indication of if the port is active high or active low.
 *
 * @return 
 */
int xmega_reg_int_cb( uint8_t int_num, void (*cb)(void), PORT_t* port, uint8_t pin, bool active_low)
{
	// Create an interrupt on Port/Pin
	
	// Set pin as input
	port->DIRCLR = 0x01 << pin;

	// Totem-pole w/o Pull-up
	PORTCFG.MPCMASK = 0x01 << pin;
	port->PIN0CTRL = PORT_OPC_TOTEM_gc | (active_low ? PORT_ISC_FALLING_gc : PORT_ISC_RISING_gc);
	
	// Select the proper interrupt scheme
	port->INTCTRL = PORT_INT0LVL_LO_gc | PORT_INT1LVL_OFF_gc;
	
	// Add the pin to the mask.
	port->INT0MASK |= 0x01 << pin;
	
	// save the callback function
	switch(int_num)
	{
		case 0:
			registered_interrupts.p1_cbfunction = cb;	
			registered_interrupts.p1_pin = pin;
			registered_interrupts.p1_port = port;
			registered_interrupts.p1_active_low = active_low;
		break;
		
		case 1:
			registered_interrupts.p2_cbfunction = cb;	
			registered_interrupts.p2_pin = pin;
			registered_interrupts.p2_port = port;
			registered_interrupts.p2_active_low = active_low;
		break;
		
		case 2:
		/// @bug Secondary IMU interrupt channel not implemented.
			registered_interrupts.p3_cbfunction = cb;	
			registered_interrupts.p3_pin = pin;
			registered_interrupts.p3_port = port;
			registered_interrupts.p3_active_low = active_low;
		break;
		
		case 3:
		/// @bug Secondary IMU interrupt channel not implemented.
			registered_interrupts.p4_cbfunction = cb;	
			registered_interrupts.p4_pin = pin;
			registered_interrupts.p4_port = port;
			registered_interrupts.p4_active_low = active_low;
		break;
	}

	return 0;
	
}

/// Interrupt vector for TWI motion devices.
ISR(PORTC_INT0_vect)
{

	// Determine which interrupt was fired.

	// Perform callback.
	printf("PORTC Interrupt Called.\n");

	// Update IMU data

	// Interrupt serviced.
	PORTC.INTFLAGS = 0;

}
